;; This will grow into part of Lemma's standard library.

;; A macro to make defining macros nicer...
(def defmacro
  (macro [name arglist @body]
    `(def ~name (macro ~arglist ~@body))))

;; A macro to make defining functions nicer...
(defmacro defn [name arglist @body]
  `(def ~name (fn ~arglist ~@body)))


;; do
(defmacro do [@body]
  `((fn [] ~@body)))


;; Implement the usual if expression
(defmacro if [p? a b]
  `(cond ~p? ~a true ~b))

;; And if's little sister, when
(defmacro when [p? @body]
  `(cond ~p? (do ~@body) true nil))



;; Just to save typing.
(defn second [s]
  (first (rest s)))

;; Get a list containing the elements of xs with odd-numbered indices
(defn odds [xs]
  (if (empty? xs)
      (seq xs)
      (cons (first xs) (odds (rest (rest xs))))))

;; Get a list containing the elements of xs with even-numbered indices
(defn evens [xs]
  (if (or (empty? xs) (= 1 (length xs)))
      (seq xs)
      (cons (first (rest xs)) (evens (rest (rest xs))))))


;; let
(defmacro let [bindings @body]
  `((fn ~(odds bindings) ~@body) ~@(evens bindings)))

;; like let, but allows recursion using recur
(defmacro loop [bindings @body]
  `(do
     (defn recur ~(odds bindings) ~@body)
     (recur ~@(evens bindings))))

;; old version makes use of the Y combinator
#;(defmacro loop [bindings @body]
  (let [prm (odds  bindings)
        arg (evens bindings)]
  `(do
     (defn Y [f]
       ((fn [recur] (f (fn [~@prm] ((recur recur) ~@prm))))
        (fn [recur] (f (fn [~@prm] ((recur recur) ~@prm))))))
     (defn gen [recur]
       (fn [~@prm] ~@body))
     ((Y gen) ~@arg))))

;; it's a mix of if and let
;; creates a binding and evaluates the body if the binding is truthy
(defmacro let-if [binding texpr fexpr]
  (let [var (first binding)
        val (second binding)]
    `((fn [~var] (if ~var ~texpr ~fexpr)) ~val)))

;; like let, but sets all bindings to the result(s) of
;; the first expression in body
;; WARNING: you will get garbage values if not enough
;;          values are produced to bind all the variables
(defmacro let-values [bindings @body]
  `((fn ~bindings ~@(rest body)) ~(first body)))



;; Evaluate body n times (times evaluates to true)
(defmacro times [n @body]
  `(do
     (defn once [i]
       (if (= i 2)
           (do ~@body true)
           (do
             ~@body
             (once (- i 1)))))
     (once ~n)))



;; Generate predicates to test for each type
(let [types ["Vector" "HashMap" "List" "Symbol" "Macro" "Fexpr" "function" "string"]]
  (for-each
    (fn [s]
      (let [name (str (.lower s) "?")]
        (table-set! lua.lemma name (fn [a]
             (= (type a) s)))))
    types))

;; Return a new seq with the values of ys appended to those of xs
(defn append [xs ys]
  (loop [xs (reverse xs) ys ys]
    (if (empty? xs)
      ys
      (recur (rest xs) (cons (first xs) ys)))))

;; Map f over xs, then return the concatenated results separated by sep
(defn mapstr [f xs sep]
  (set! sep (if (= sep nil)
                ""
                sep))
  (let [strs (map (fn [a] (str (f a) sep)) xs)]
    (lua.string.sub (str @strs) 1 (- -1 (length sep)))))   ; remove trailing sep

;; A convenience macro for Lua interop
(defmacro defmethod [t-dot-f args @body]
  (if (not (vector? args))
    (lua.Error (str "defmethod: expected vector, got " (lua.tostring args) " : " (type args)))
    `(defn ~t-dot-f [self ~@args] ~@body)))

;; True if any element x in xs satisfies (p? x), false otherwise
(defn any? [p? xs]
  (if (empty? xs)
      false
      (let [x (first xs)]
        (if (p? x)
            true
            (any? p? (rest xs))))))

;; Temporarily here for debugging purposes
;; Dumps the *metadata* info
(defn dump-meta []
  ((lua.loadstring "
    for k, v in pairs(lemma['*metadata*']) do
      for m, w in pairs(v) do
        io.write(tostring(k)..': '..m..' =  '..w..'\\n')
      end
    end
  ")))

;; Collect garbage after loading
(lua.collectgarbage :collect)

